pipeline {
    agent any

    environment {
        ARTIFACTORY_URL = "${ARTIFACTORY_URL}"
        SONARQUBE_URL = "${SONARQUBE_URL}"
        PATH = "/home/ubuntu/bin:/usr/bin:$PATH"
    }

    tools {
        maven 'Maven'    
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "üìù Checking out the code..."
                    checkout scm
                    echo "‚úÖ Code checkout completed successfully!"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    echo "üîç Running SonarQube Analysis..."
                    withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONARQUBE_TOKEN')]) {
                        sh '''
                            mvn sonar:sonar -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.host.url=${SONARQUBE_URL} \
                            -Dsonar.login=${SONARQUBE_TOKEN}
                        '''
                    }
                    echo "‚úÖ SonarQube analysis completed!"
                }
            }
        }

        stage('Build Artifact with Maven') {
            steps {
                script {
                    echo "‚öôÔ∏è Building artifact with Maven..."
                    sh 'mvn clean install'
                    echo "‚úÖ Artifact build completed!"
                }
            }
        }

        stage('Push to Artifactory') {
            steps {
                script {
                    echo "üöÄ Pushing artifact to Artifactory..."

                    withCredentials([usernamePassword(credentialsId: 'artifactory-credentials', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
                        sh """
                        curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} \
                        -T target/${ARTIFACTORY_FILE_NAME} \
                        "${ARTIFACTORY_URL}/${ARTIFACTORY_PATH}/${ARTIFACTORY_FILE_NAME}"
                        if [ $? -ne 0 ]; then
                            echo "‚ùå Failed to upload artifact to Artifactory"
                            exit 1
                        fi
                        """
                    }

                    echo "‚úÖ Artifact pushed to Artifactory!"
                }
            }
        }
    }

    post {
        always {
            script {
                echo "üßπ Cleaning up workspace..."
                sh 'rm -rf target'
                sh 'rm -rf *.log'
                echo "‚úÖ Cleanup completed!"

                def subject = "‚úÖ Pipeline Build Success"
                def body = "The build for branch ${env.BRANCH_NAME} has succeeded."
                
                if (currentBuild.result == 'FAILURE' || currentBuild.result == null) {
                    subject = "‚ùå Pipeline Build Failure"
                    body = "The build for branch ${env.BRANCH_NAME} has failed. Please check the logs."
                }
                
                emailext(
                    subject: subject,
                    body: body,
                    to: '${NOTIFY_EMAIL}',
                    from: '${FROM_EMAIL}',  
                )
                echo "üìß Notification sent!"
            }
        }
    }
}
